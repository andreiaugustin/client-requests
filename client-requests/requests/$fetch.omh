JavaScript:function shouldCallback() {
JavaScript:    if (me.callbackMethod.length && me.callbackRemoteForm.length)
JavaScript:        return true;
JavaScript:    if (me.callbackInstance)
JavaScript:        return true;
JavaScript:    return false;
JavaScript:}
JavaScript:
JavaScript:function toRowOrList(pObjectOrArray) {
JavaScript:    if (Array.isArray(pObjectOrArray))
JavaScript:        return omnis_list.convertJavaScriptArrayToOmnisList(pObjectOrArray)
JavaScript:    return omnis_list.convertJavaScriptObjectToOmnisRow(pObjectOrArray);
JavaScript:}
JavaScript:
JavaScript:async function parseResponse(response) {
JavaScript:    if (!response.ok)
JavaScript:        throw new Error(`HTTP error status: ${response.status}`);
JavaScript:
JavaScript:    const contentType = response.headers.get('Content-Type');
JavaScript:
JavaScript:    if (contentType.includes("application/json"))
JavaScript:        return me.autoConvertKnownTypes ? toRowOrList(await response.json()) : await response.json();
JavaScript:    else if (contentType.includes("text/html") || contentType.includes("text/plain"))
JavaScript:        return await response.text();
JavaScript:    else if (contentType.includes("form-data"))
JavaScript:        return await response.formData();
JavaScript:    else if (contentType.includes("blob"))
JavaScript:        return await response.blob();
JavaScript:    else
JavaScript:        throw new Error(`Unsupported content type: ${contentType}`);
JavaScript:}
JavaScript:
JavaScript:function buildHeaders(headers) {
JavaScript:    // TODO
JavaScript:}
JavaScript:
JavaScript:const fetchOptions = {
JavaScript:    method: pMethod,
JavaScript:    headers: new Headers(buildHeaders(pHeaders))
JavaScript:};
JavaScript:
JavaScript:if (pPayload && !headers['Content-Type']) {
JavaScript:    fetchOptions.headers.set('Content-Type', pContentType);
JavaScript:}
JavaScript:
JavaScript:if (pPayload) {
JavaScript:    switch (pContentType) {
JavaScript:        case 'application/json':
JavaScript:            fetchOptions.body = JSON.stringify(pPayload);
JavaScript:            break;
JavaScript:
JavaScript:        case 'application/x-www-form-urlencoded':
JavaScript:            fetchOptions.body = new URLSearchParams(pPayload);
JavaScript:            break;
JavaScript:
JavaScript:        case 'multipart/form-data':
JavaScript:            fetchOptions.headers.delete('Content-Type');
JavaScript:            const formData = new FormData();
JavaScript:            for (const name in pPayload)
JavaScript:                formData.append(name, pPayload[name]);
JavaScript:            fetchOptions.body = formData;
JavaScript:            break;
JavaScript:
JavaScript:        case 'text/plain':
JavaScript:            fetchOptions.body = pPayload;
JavaScript:            break;
JavaScript:
JavaScript:        default:
JavaScript:            fetchOptions.body = pPayload;
JavaScript:    }
JavaScript:}
JavaScript:
JavaScript:if ((pMethod === 'POST' || pMethod === 'PUT') && pPayload) {
JavaScript:    // TODO: support more payloads
JavaScript:    fetchOptions.body = pPayload;
JavaScript:    fetchOptions.headers.set('Content-Type', 'application/json');
JavaScript:}
JavaScript:
JavaScript:fetch(pURL, fetchOptions)
JavaScript:.then(parseResponse)
JavaScript:.then(data => {
JavaScript:    if (shouldCallback())
JavaScript:        return me.doCallback(data, true);
JavaScript:    me.$completed(data)
JavaScript:})
JavaScript:.catch(error => {
JavaScript:    if (shouldCallback())
JavaScript:        return me.doCallback(error, false);
JavaScript:    me.$error(error)
JavaScript:})